"""
LeetCode 389: Find the Difference

Given two strings s and t, return the letter that was added to t.
String t is generated by random shuffling string s and then adding one more letter at a random position.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"

The solution uses XOR operation which has the following properties:
1. XOR of a number with itself is 0
2. XOR of a number with 0 is the number itself
3. XOR operation is associative and commutative

This allows us to find the added character by XORing all characters in both strings:
- Same characters will cancel out (XOR with self = 0)
- The remaining value will be the added character

Time Complexity: O(n) where n is the length of string t
Space Complexity: O(1)
"""

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        """
        Find the letter that was added to string t.
        Uses XOR operation to find the different character efficiently.
        
        Args:
            s: Original string
            t: Modified string with one extra character
            
        Returns:
            str: The extra character in string t
        """
        # Initialize result with 0
        result = 0
        
        # XOR all characters in string s
        for char in s:
            result ^= ord(char)
            
        # XOR all characters in string t
        for char in t:
            result ^= ord(char)
            
        # The remaining value is the ASCII value of added character
        return chr(result)
    
    def findTheDifference_alternative(self, s: str, t: str) -> str:
        """
        Alternative solution using sum of ASCII values.
        This might be more intuitive but less efficient due to larger numbers.
        
        Args:
            s: Original string
            t: Modified string with one extra character
            
        Returns:
            str: The extra character in string t
        """
        # Sum ASCII values of all characters in both strings
        sum_s = sum(ord(char) for char in s)
        sum_t = sum(ord(char) for char in t)
        
        # Difference will be ASCII value of added character
        return chr(sum_t - sum_s)


def run_test_cases() -> None:
    """Function to run comprehensive test cases"""
    solution = Solution()
    
    test_cases = [
        # Test case 1: Basic case
        {
            's': 'abcd',
            't': 'abcde',
            'expected': 'e',
            'description': 'Basic case with added character at end'
        },
        # Test case 2: Empty string
        {
            's': '',
            't': 'y',
            'expected': 'y',
            'description': 'Empty original string'
        },
        # Test case 3: Added character in middle
        {
            's': 'abc',
            't': 'abxc',
            'expected': 'x',
            'description': 'Added character in middle'
        },
        # Test case 4: Repeated characters
        {
            's': 'aaa',
            't': 'aaaa',
            'expected': 'a',
            'description': 'Added character is same as existing'
        },
        # Test case 5: Different cases
        {
            's': 'AaBb',
            't': 'AaBbC',
            'expected': 'C',
            'description': 'Mixed case characters'
        }
    ]
    
    # Test both implementations
    implementations = [
        (solution.findTheDifference, "XOR implementation"),
        (solution.findTheDifference_alternative, "Sum implementation")
    ]
    
    for impl_func, impl_name in implementations:
        print(f"\nTesting {impl_name}:")
        for test_case in test_cases:
            s = test_case['s']
            t = test_case['t']
            expected = test_case['expected']
            description = test_case['description']
            
            result = impl_func(s, t)
            print(f"\nTest Case: {description}")
            print(f"Input: s = '{s}', t = '{t}'")
            print(f"Expected: '{expected}'")
            print(f"Got: '{result}'")
            print(f"Result: {'PASSED' if result == expected else 'FAILED'}")
    
    # Performance test for large strings
    print("\nPerformance Test:")
    s_large = "abcdefghijklmnopqrstuvwxyz" * 10000
    t_large = s_large + "z"
    
    from time import time
    
    # Test XOR implementation
    start = time()
    solution.findTheDifference(s_large, t_large)
    xor_time = time() - start
    
    # Test Sum implementation
    start = time()
    solution.findTheDifference_alternative(s_large, t_large)
    sum_time = time() - start
    
    print(f"XOR implementation time: {xor_time:.6f} seconds")
    print(f"Sum implementation time: {sum_time:.6f} seconds")


if __name__ == "__main__":
    run_test_cases()