"""
LeetCode 389 - Find the Difference

Problem Statement:
You are given two strings s and t.
String t is generated by random shuffling string s and then adding one more letter at a random position.
Return the letter that was added to t.

Time Complexity: O(n), where n is the length of string t
Space Complexity: O(1)
"""

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        # Using XOR operation:
        # a ^ a = 0 (XOR of same characters cancels out)
        # 0 ^ a = a
        # Order doesn't matter for XOR
        xor_result = 0
        
        # XOR all characters in s
        for char in s:
            xor_result ^= ord(char)
        
        # XOR all characters in t
        for char in t:
            xor_result ^= ord(char)
        
        # The remaining value is the added character
        return chr(xor_result)


def test_find_difference():
    solution = Solution()
    
    # Test cases
    test_cases = [
        ("abcd", "abcde", "e"),                 # Added at end
        ("", "y", "y"),                         # Empty string s
        ("ae", "aea", "a"),                     # Added duplicate character
        ("hello", "hello1", "1"),               # Added number
        ("xyz", "xyzw", "w"),                   # Added at end
        ("abcde", "abcdef", "f"),              # Added at end
        ("leetcode", "leetcodex", "x"),         # Added at end
        ("hello", "ohell", "o"),               # Added duplicate with shuffle
    ]
    
    for i, (s, t, expected) in enumerate(test_cases, 1):
        result = solution.findTheDifference(s, t)
        print(f"Test case {i}:")
        print(f"String s: {s}")
        print(f"String t: {t}")
        print(f"Expected added character: {expected}")
        print(f"Got: {result}")
        print(f"Pass: {result == expected}\n")


if __name__ == "__main__":
    test_find_difference()